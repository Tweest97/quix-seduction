##################################
# Quixotic Seduction
# quix_seduce_scheme_outcome_events.txt
# Version:1.2.2.a
# by El Ingenioso Hidalgo Don Quixote de la Mancha
# https://DonQuixote.Games/
##################################
namespace = quix_seduce_outcome
######################################################
# SUCCESS EVENTS FOR OWNER
# 2000-2999
######################################################

# Based Specific conditions
# Imperial Ambition
quix_seduce_outcome.2000 = {
	type = character_event
	title = quix_seduce_outcome.2000.t
	desc = quix_seduce_outcome.2000.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
		
	trigger = {
	#always = yes
	scope:target = { highest_held_title_tier = tier_empire }
	}

	immediate = {
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2000.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes
		
		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2000.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option if

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3000
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

#Trait Based
# Cruel Intentions
quix_seduce_outcome.2010 = {
	type = character_event
	title = quix_seduce_outcome.2010.t
	desc = quix_seduce_outcome.2010.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		has_trait = sadistic
		scope:target = { has_trait = sadistic }
	}

	weight_multiplier = {
		base = 100
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
		
		play_music_cue = "mx_cue_seduction"
		
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2010.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2010.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3010
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}
#General conditions
# Roll in the Hay
quix_seduce_outcome.2020 = {
	type = character_event
	title = quix_seduce_outcome.2020.t
	desc = quix_seduce_outcome.2020.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2020.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2020.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3020
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Chapel of Love
quix_seduce_outcome.2021 = {
	type = character_event
	title = quix_seduce_outcome.2021.t
	desc = quix_seduce_outcome.2021.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2021.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2021.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Afternoon Delight
quix_seduce_outcome.2022 = {
	type = character_event
	title = quix_seduce_outcome.2022.t
	desc = quix_seduce_outcome.2022.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2022.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2022.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Catacombs
quix_seduce_outcome.2023 = {
	type = character_event
	title = quix_seduce_outcome.2023.t
	desc = quix_seduce_outcome.2023.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2023.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2023.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Cabin in the woods
quix_seduce_outcome.2024 = {
	type = character_event
	title = quix_seduce_outcome.2024.t
	desc = quix_seduce_outcome.2024.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2024.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2024.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Country estate
quix_seduce_outcome.2025 = {
	type = character_event
	title = quix_seduce_outcome.2025.t
	desc = quix_seduce_outcome.2025.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2025.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2025.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Rock the Boat
quix_seduce_outcome.2026 = {
	type = character_event
	title = quix_seduce_outcome.2026.t
	desc = quix_seduce_outcome.2026.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2026.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2026.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Wine Cellar
quix_seduce_outcome.2027 = {
	type = character_event
	title = quix_seduce_outcome.2027.t
	desc = quix_seduce_outcome.2027.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2027.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2027.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# The Honest Approach
quix_seduce_outcome.2028 = {
	type = character_event
	title = quix_seduce_outcome.2028.t
	desc = quix_seduce_outcome.2028.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2028.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2028.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Impatience
quix_seduce_outcome.2029 = {
	type = character_event
	title = quix_seduce_outcome.2029.t
	desc = quix_seduce_outcome.2029.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2029.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2029.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Both are Lustful - Unbridled Passion
quix_seduce_outcome.2030 = {
	type = character_event
	title = quix_seduce_outcome.2030.t
	desc = {
		desc = quix_seduce_outcome.2030.a.desc
		triggered_desc = {
			trigger = {
				drinks_alcohol_trigger = yes
			}
			desc = quix_seduce_outcome.2030.alcohol.desc
		}
		desc = quix_seduce_outcome.2030.b.desc
	}
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		has_trait = lustful
		scope:target = { has_trait = lustful }
	}
	
	weight_multiplier = {
		base = 50
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2030.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2030.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3030
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# My Reason to Live
quix_seduce_outcome.2031 = {
	type = character_event
	title = quix_seduce_outcome.2031.t
	desc = quix_seduce_outcome.2031.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2031.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2031.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# I think we're alone now
quix_seduce_outcome.2032 = {
	type = character_event
	title = quix_seduce_outcome.2032.t
	desc = quix_seduce_outcome.2032.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2032.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2032.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3021
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

#Clandestine Tryst
quix_seduce_outcome.2301 = {
	type = character_event
	title = quix_seduce_outcome.2301.t
	desc = quix_seduce_outcome.2301.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	immediate = {
		scope:target = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2301.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		flavor = quix_seduce_outcome.2301.a.tt
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2301.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3301
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# Stow away
quix_seduce_outcome.2302 = {
	type = character_event
	title = quix_seduce_outcome.2302.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					scope:target = { court_owner = scope:target }
				}
				desc = quix_seduce_outcome.2302.desc_court_owner
			}
			desc = quix_seduce_outcome.2302.desc_not_court_owner
		}
		desc = quix_seduce_outcome.2302.desc_end
	}
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		seduction_target_is_close_trigger = no
		exists = scope:target.location.barony
	}

	weight_multiplier = {
		base = 0.5
		modifier = { #More likely if they're in a different realm
			add = 1
			scope:target = {
				NOT = {
					top_liege = root.top_liege
				}
			}
		}
	}

	immediate = {
		scope:target.location.barony = {
			save_scope_as = court_of_residence
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success): yes
		owner_seduce_outcome_sex_effect = yes
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2302.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2302.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3302
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

# I Put A Spell On You...
quix_seduce_outcome.2303 = {
	type = character_event
	title = quix_seduce_outcome.2303.t
	desc = quix_seduce_outcome.2303.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		has_trait = witch
		scope:target = { has_trait = witch }
	}

	weight_multiplier = {
		base = 0.5
		modifier = { #More likely if you're also gregarious!
			add = 2
			has_trait = gregarious
		}
	}

	immediate = {
		get_quirk_character_effect = yes
		scope:target = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2303.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2303.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3303
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

#Meet under the open sky (primarily for hunters etc.)
#Festival
quix_seduce_outcome.2304 = {
	type = character_event
	title = quix_seduce_outcome.2304.t
	desc = quix_seduce_outcome.2304.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = terrain
	}
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	weight_multiplier = {
		base = 0.5
		modifier = { #Much more likely if target is a hunter
			add = 2
			scope:target = { has_trait = lifestyle_hunter }
		}
		modifier = { #More likely if you're also a hunter!
			add = 1
			has_trait = lifestyle_hunter
		}
		modifier = {
			add = 0.5
			seduction_target_is_close_trigger = no
		}
	}

	immediate = {
		select_local_harmless_animal_effect = yes
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):yes
		owner_seduce_outcome_sex_effect = yes
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2304.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2304.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3304
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

#Post Feast
quix_seduce_outcome.2305 = {
	type = character_event
	title = quix_seduce_outcome.2305.t
	desc = {
		desc = quix_seduce_outcome.2305.desc_opening
		desc = quix_seduce_outcome.2305.desc_ending
	}
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	weight_multiplier = {
		base = 0.5
		modifier = {
			add = 1
			scope:target = { has_learning_lifestyle_trait_trigger = yes }
		}
		modifier = {
			add = 1
			scope:target = { has_trait = education_learning }
		}
	}

	immediate = {
		save_scope_as = love_letter_target
		scope:target = {
			love_letter_calculation_effect = yes
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		owner_seduce_outcome_sex_effect = yes
	}

	option = { #Go for both consummation and relationship
		name = quix_seduce_outcome.2305.a
		trigger = { seduce_outcome_become_lovers_trigger = yes } #Enabled if a player target said "lovers please" or target is AI
		flavor = {
			first_valid = {
				triggered_desc = {
					trigger = { scope:target = { var:love_letter_quality = 1 } }
					desc = quix_seduce_outcome.2305.a_terrible
				}
				triggered_desc = {
					trigger = { scope:target = { var:love_letter_quality = 2 } }
					desc = quix_seduce_outcome.2305.a_okay
				}
				triggered_desc = {
					trigger = { scope:target = { var:love_letter_quality = 3 } }
					desc = quix_seduce_outcome.2305.a_great
				}
				triggered_desc = {
					trigger = { scope:target = { var:love_letter_quality = 4 } }
					desc = quix_seduce_outcome.2305.a_amazing
				}
			}
		}
		
		owner_seduce_outcome_become_lovers_option_effects = yes

		ai_chance = {
			base = 100
		}
	}

	option = { #I'm just here for the fun time!
		name = quix_seduce_outcome.2305.b
		trigger = { seduce_outcome_just_sex_trigger = yes } #Blocks this option for AI owners if the target is a player who said "lovers please"

		owner_seduce_outcome_just_sex_effects = yes

		ai_chance = {
			base = 0
			ai_value_modifier = {
				ai_greed = 0.25
				ai_vengefulness = 0.25
			}
		}
	}

	after = {
		scope:target = {
			trigger_event = quix_seduce_outcome.3305
		}
		show_as_tooltip = {
			scope:scheme = {
				end_scheme = yes
			}
		}
	}
}

######################################################
# SUCCESS EVENTS FOR TARGET (mirror of owner's)
# 3000-3999
######################################################

# Emperor
quix_seduce_outcome.3000 = {
	type = character_event
	title = quix_seduce_outcome.2000.t
	desc = quix_seduce_outcome.3000.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3000.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2000.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

# Drunkards
# Both are cruel
quix_seduce_outcome.3010 = {
	type = character_event
	title = quix_seduce_outcome.2010.t
	desc = quix_seduce_outcome.3010.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes 
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.2010.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2010.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }
		
		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

# Privy
# Stables
quix_seduce_outcome.3020 = {
	type = character_event
	title = quix_seduce_outcome.2020.t
	desc = quix_seduce_outcome.3020.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.2020.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2020.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

# Gluttons
# Hedonists
quix_seduce_outcome.3030 = {
	type = character_event
	title = quix_seduce_outcome.2030.t
	desc = {
		desc = quix_seduce_outcome.3030.a.desc
		triggered_desc = {
			trigger = {
				drinks_alcohol_trigger = yes
			}
			desc = quix_seduce_outcome.3030.alcohol.desc
		}
		desc = quix_seduce_outcome.3030.b.desc
	}
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.2030.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2030.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

# At the walls
# In the camp
quix_seduce_outcome.3040 = {
	type = character_event
	title = quix_seduce_outcome.2040.t
	desc = quix_seduce_outcome.3040.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = courtyard
	}
	left_portrait = scope:owner

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes 
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.2040.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2040.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

# Chaste
# Old
quix_seduce_outcome.3050 = {
	type = character_event
	title = quix_seduce_outcome.2050.t
	desc = quix_seduce_outcome.3050.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.2050.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2050.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Owner comes to the target's chambers
#Meet at an inn
quix_seduce_outcome.3301 = {
	type = character_event
	title = quix_seduce_outcome.3301.t
	desc = quix_seduce_outcome.3301.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3301.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }
		flavor = quix_seduce_outcome.3301.a.tt

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.3301.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }
		
		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Owner sneaks into target's court (distance seduction)
#Hide in your chambers
quix_seduce_outcome.3302 = {
	type = character_event
	title = quix_seduce_outcome.2302.t
	desc = {
		desc = quix_seduce_outcome.3302.desc_opening
		first_valid = {
			triggered_desc = {
				trigger = {
					OR = {
						scope:target = { court_owner = scope:target }
						NOT = { exists = scope:target.court_owner }
					}
				}
				desc = quix_seduce_outcome.3302.desc_court_owner
			}
			desc = quix_seduce_outcome.3302.desc_not_court_owner
		}
		desc = quix_seduce_outcome.3302.desc_end
	}
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		if = {
			limit = {
				NOT = { scope:target.court_owner = scope:target }
				exists = scope:target.court_owner
			}
			scope:target.court_owner = { save_scope_as = court_owner }
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
		
		play_music_cue = "mx_cue_seduction"
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3302.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }
	
		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2302.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }
		
		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Gregarious target(and owner), gushing compliments
#Both Witches
quix_seduce_outcome.3303 = {
	type = character_event
	title = quix_seduce_outcome.2303.t
	desc = quix_seduce_outcome.3303.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			assign_quirk_effect = yes
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3303.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2302.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Out in the woods
#Festival
quix_seduce_outcome.3304 = {
	type = character_event
	title = quix_seduce_outcome.2304.t
	desc = quix_seduce_outcome.3304.desc
	
	theme = seduce_scheme
	override_background = {
		event_background = terrain
	}
	left_portrait = scope:owner

	immediate = {
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3304.a
		trigger = {	scope:owner = { has_character_flag = consummation_and_relationship } }
		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2302.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }
		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Love letter
#Post Feast
quix_seduce_outcome.3305 = {
	type = character_event
	title = quix_seduce_outcome.2305.t
	desc = quix_seduce_outcome.3305.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		save_scope_as = love_letter_target
		scope:owner = {
			love_letter_calculation_effect = yes
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3305.a
		trigger = {	scope:owner = { has_character_flag = consummation_and_relationship } }
		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2302.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }
		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Seduction of spouse
#Seduction of concubine
quix_seduce_outcome.3306 = {
	type = character_event
	title = quix_seduce_outcome.3306.t
	desc = quix_seduce_outcome.3306.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3306.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.2302.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Seduction of rival
#Seduction of Spymaster
quix_seduce_outcome.3307 = {
	type = character_event
	title = quix_seduce_outcome.3307.t
	desc = quix_seduce_outcome.3307.desc
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3307.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.3307.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

#Seduction of close family member
#Seduction of twin
quix_seduce_outcome.3308 = {
	type = character_event
	title = quix_seduce_outcome.3308.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = {
					relation_with_character_is_sodomy_in_my_or_lieges_faith_trigger = { CHARACTER = scope:owner }
				}
				desc = quix_seduce_outcome.3308.desc_illigal
			}
			desc = quix_seduce_outcome.3308.desc_not_illigal
		}
	}
	
	theme = seduce_scheme
	left_portrait = scope:owner

	immediate = {
		scope:owner = {
			assign_quirk_effect = yes
		}
		#Either runs had_sex_with_effect or shows a tooltip of it (effect is always just run once per success):
		target_seduce_outcome_sex_effect = yes
	}

	option = { #We went for both consummation and relationship
		name = quix_seduce_outcome.3308.a
		trigger = { scope:owner = { has_character_flag = consummation_and_relationship } }

		set_relation_lover_through_seduction_effect = {
			CHARACTER = scope:owner
		}
	}

	option = { #We're just here for the fun time!
		name = quix_seduce_outcome.3307.b
		trigger = { scope:owner = { NOT = { has_character_flag = consummation_and_relationship } } }

		scope:scheme = {
			end_scheme = yes
		}
	}

	after = {
		if = {
			limit = { scope:owner = { has_character_flag = consummation_and_relationship } }
			scope:owner = { remove_character_flag = consummation_and_relationship }
		}
	}
}

######################################################
# FAILURE EVENTS FOR OWNER
# 4000-4999
######################################################

# Nice rejection - I don't think about you that way
# Nice rejection - I need to work on myself
quix_seduce_outcome.4001 = {
	type = character_event
	title = quix_seduce_outcome.4001.t
	desc = {
		first_valid = {
			triggered_desc = {
				trigger = { scope:target = { relation_with_character_is_incestuous_in_my_faith_trigger = { CHARACTER = root } } }
				desc = quix_seduce_outcome.4001.incest.desc
			}
			desc = quix_seduce_outcome.4001.regular.desc
		}
	}
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		OR = {
			NOT = { exists = scope:scheme_discovered }
			exists = scope:target_chose_nice_reject #Player chose this outcome
		}
	}

	weight_multiplier = {
		base = 0.75
		modifier = {
			reverse_opinion = {
				target = scope:target
				value >= high_positive_opinion
			}
			factor = 1.3
		}
		modifier = {
			OR = {
				has_relation_friend = scope:target
				is_spouse_of = scope:target
			}
			factor = 1.3
		}
		modifier = { #Very unlikely if they don't dislike you
			NOR = {
				reverse_opinion = {
					target = scope:target
					value >= low_positive_opinion
				}
				AND = {
					scope:target = { ai_compassion >= medium_positive_ai_value }
					reverse_opinion = {
						target = scope:target
						value >= low_negative_opinion
					}
				}
			}
			factor = 0.1
		}
	}

	immediate = {
		scope:target = {
			if = {
				limit = { root = { is_ai = no }	}
				assign_quirk_effect = yes
			}
		}
	}

	option = {
		name = quix_seduce_outcome.4001.a

		scope:target = { seduction_cooldown_for_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = {
			end_scheme = yes
		}
	}
}

# Never! Hard reject
# Thinks its a joke
quix_seduce_outcome.4002 = {
	type = character_event
	title = quix_seduce_outcome.4001.t
	desc = quix_seduce_outcome.4002.desc
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		OR = {
			reverse_opinion = { #Dislikes you
				target = scope:target
				value < 0
			}
			AND = { #Thinks that you're ugly
				scope:target = { ai_compassion < medium_positive_ai_value }
				attraction < 0
			}
			ai_values_divergence = { #Very different
				target = scope:target
				value >= high_ai_values_divergence
			}
			scope:target = { has_trait = chaste } #Chaste
			scope:target = { #This is not honorable
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = adulterer GENDER_CHARACTER = scope:target }
				OR = {
					ai_honor >= low_positive_ai_value
					has_trait = zealous
					has_trait = honest
				}
			}
		}
		NOT = { exists = scope:scheme_discovered }
		NOT = { is_spouse_of = scope:target }

		# Disabled by Graceful Recovery Perk
		NOT = { has_perk = graceful_recovery_perk }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			reverse_opinion = {
				target = scope:target
				value >= high_positive_opinion
			}
			factor = 0.1
		}
	}


	option = {
		name = quix_seduce_outcome.4002.a

		scope:target = { seduction_block_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = {
			end_scheme = yes
		}
	}
}

# Nice...? rejection - Thanks for the attention
# non rejection
quix_seduce_outcome.4100 = {
	type = character_event
	title = quix_seduce_outcome.4001.t
	desc = {
		desc = quix_seduce_outcome.4100.desc
		first_valid = {
			triggered_desc = {
				trigger = { 
					scope:target = { 
						is_married = yes 
						any_consort = { NOT = { this = scope:owner } }
					} 
				}
				desc = quix_seduce_outcome.4100.desc_married
			}
			desc = quix_seduce_outcome.4100.desc_fallback
		}
	}
	
	theme = seduce_scheme
	left_portrait = scope:target
	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	trigger = {
		scope:target = {
			is_ai = yes
			OR = {
				has_trait = seducer
				has_trait = lustful
				has_trait_malicious_trigger = yes
			}
			any_consort = { NOT = { this = scope:owner } }
		}
		NOT = { exists = scope:scheme_discovered }
	}

	weight_multiplier = {
		base = 1
		modifier = {
			reverse_opinion = {
				target = scope:target
				value >= high_positive_opinion
			}
			factor = 1.3
		}
		modifier = {
			has_trait_malicious_trigger = yes
			factor = 1.2
		}
		modifier = {
			has_trait = lustful
			factor = 1.5
		}
		modifier = {
			has_trait = seducer
			factor = 2
		}
		modifier = {
			OR = {
				can_touch_someone_trigger = no
				scope:target = { can_touch_someone_trigger = no }
			}
			factor = 0.5
		}
	}

	immediate = {
		scope:target = {
			if = {
				limit = { exists = primary_spouse }
  				primary_spouse = { save_scope_as = target_spouse }
 			}
		}
	}

	option = {
		name = quix_seduce_outcome.4100.a

		scope:target = { seduction_cooldown_for_character_effect = { CHARACTER = scope:owner } }

		scope:scheme = {
			end_scheme = yes
		}
	}
}

